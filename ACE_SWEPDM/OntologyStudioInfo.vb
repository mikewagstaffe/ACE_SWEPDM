Imports System.Runtime.Serialization    'Required For WCF InterProcess Communiations
Imports System.ServiceModel             'Required For WCF InterProcess Communications

#Region "**** WCF CODE: Communications Classes and Interfaces ****"
Namespace WCFComms
    ''' <summary>
    ''' The object used to hold information about an item from ontology studio
    ''' Members
    ''' Item - The item id generated by Ontology Studio
    ''' Description - A description for the Item generated by ontology studio
    ''' Path - the relative path that all items should be stored in in the doument management system
    ''' Extended - additional informatio can be any data type, complex types must be serialised with a data contract
    ''' </summary>
    <DataContract()> _
    Public Class OntologyStudioInfo
        <DataMember()> Public Item As String
        <DataMember()> Public sDataString1 As String
        <DataMember()> Public sDataString2 As String
        <DataMember()> Public sDataString3 As String
        <DataMember()> Public Extended As Object
        <DataMember()> Public Result As Integer
    End Class

    ''' <summary>
    ''' An enumeration used to represent the various allowable function modes that Ontology Studio commands can run in
    ''' not all commands can run in all modes, in those cases the mode flag will be ignored
    ''' </summary>
    <DataContract(Name:="ItemMode")> _
    Public Enum ItemMode
        'ModeNormal - run Ontology Studio in default mode.
        <EnumMember()> ModeNormal
        'ModeSilent - Return whethor or not exists without GUI.
        <EnumMember()> ModeSilent
        'ModeShow - Browses to classification or returns fail.
        <EnumMember()> ModeShow
        'ModeReclassify - Re-clasify item.
        <EnumMember()> ModeReclassify
        'ModeLookup - Asks the user to provide an Onotology Studio Item
        <EnumMember()> ModeLookup
        'ModeCopy - Asks the user to provide an Onotology Studio Item that is a copy of another item
        <EnumMember()> ModeCopy

    End Enum

    ''' <summary>
    ''' The interface to the actual command on the Ontology Studio server
    ''' </summary>
    <ServiceContract()> _
    Public Interface IOntologyStudioCommand
        <OperationContract()> _
        Function Process(ByVal Item As OntologyStudioInfo, Optional ByVal Mode As ItemMode = ItemMode.ModeNormal) As OntologyStudioInfo
    End Interface

    ''' <summary>
    ''' The interface to the Actual command function on the Item Gateway Server 
    ''' </summary>
    <ServiceContract()> _
    Public Interface IItemGatewayCommand
        <OperationContract()> _
        Function Process(ByVal ItemInfo As OntologyStudioInfo, Optional ByVal Mode As ItemMode = ItemMode.ModeNormal) As OntologyStudioInfo
    End Interface

    '''' <summary>
    '''' Implementation of the Ontology Studio Remote command
    ''''' </summary>
    'Public Class ItemGatewayCommand
    '    Implements IItemGatewayCommand
    '    ''' <summary>
    '    ''' Function to process to actual remote command
    '    ''' </summary>
    '    ''' <param name="ItemInfo">The identification number of the item in ontology studio</param>
    '    ''' <param name="Mode">the opertaing mode to run the command in</param>
    '    ''' <returns>information from Ontology Studio with regards to the command carried out</returns>
    '    Public Function Process(ByVal ItemInfo As OntologyStudioInfo, Optional ByVal Mode As ItemMode = ItemMode.ModeNormal) As OntologyStudioInfo Implements IItemGatewayCommand.Process
    '        Dim ReturnWCFData As OntologyStudioInfo = Nothing
    '        Try

    '            Try
    '                If Not MainWindow.WCFRequestReceived Then 'Only save this request if we are not processing another
    '                    MainWindow.ContextWCFData = ItemInfo
    '                    MainWindow.ContextWCFMode = Mode
    '                    MainWindow.WCFRequestReceived = True
    '                End If
    '                ReturnWCFData = ItemInfo
    '                ReturnWCFData.Result = 0
    '            Catch ex As Exception
    '                ReturnWCFData = ItemInfo
    '                ReturnWCFData.Result = -100
    '                ReturnWCFData.Extended = CStr(ex.Message & ex.StackTrace)
    '            End Try
    '            Return ReturnWCFData
    '        Catch ex As Exception
    '            Return Nothing
    '        End Try
    '    End Function
    'End Class
End Namespace
#End Region

